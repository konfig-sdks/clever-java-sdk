/*
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DistrictResponse;
import com.konfigthis.client.model.SchoolsResponse;
import com.konfigthis.client.model.SectionsResponse;
import com.konfigthis.client.model.TermResponse;
import com.konfigthis.client.model.TermsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TermsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TermsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TermsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getDistrictByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terms/{id}/district"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDistrictByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDistrictById(Async)");
        }

        return getDistrictByIdCall(id, _callback);

    }


    private ApiResponse<DistrictResponse> getDistrictByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getDistrictByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DistrictResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDistrictByIdAsync(String id, final ApiCallback<DistrictResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDistrictByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DistrictResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDistrictByIdRequestBuilder {
        private final String id;

        private GetDistrictByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getDistrictById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDistrictByIdCall(id, _callback);
        }


        /**
         * Execute getDistrictById request
         * @return DistrictResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public DistrictResponse execute() throws ApiException {
            ApiResponse<DistrictResponse> localVarResp = getDistrictByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDistrictById request with HTTP info returned
         * @return ApiResponse&lt;DistrictResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DistrictResponse> executeWithHttpInfo() throws ApiException {
            return getDistrictByIdWithHttpInfo(id);
        }

        /**
         * Execute getDistrictById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DistrictResponse> _callback) throws ApiException {
            return getDistrictByIdAsync(id, _callback);
        }
    }

    /**
     * 
     * Returns the district for a term
     * @param id  (required)
     * @return GetDistrictByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
     </table>
     */
    public GetDistrictByIdRequestBuilder getDistrictById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetDistrictByIdRequestBuilder(id);
    }
    private okhttp3.Call getListCall(Integer limit, String startingAfter, String endingBefore, String count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(Integer limit, String startingAfter, String endingBefore, String count, final ApiCallback _callback) throws ApiException {
        return getListCall(limit, startingAfter, endingBefore, count, _callback);

    }


    private ApiResponse<TermsResponse> getListWithHttpInfo(Integer limit, String startingAfter, String endingBefore, String count) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(limit, startingAfter, endingBefore, count, null);
        Type localVarReturnType = new TypeToken<TermsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(Integer limit, String startingAfter, String endingBefore, String count, final ApiCallback<TermsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(limit, startingAfter, endingBefore, count, _callback);
        Type localVarReturnType = new TypeToken<TermsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private Integer limit;
        private String startingAfter;
        private String endingBefore;
        private String count;

        private GetListRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set startingAfter
         * @param startingAfter  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set count
         * @param count  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder count(String count) {
            this.count = count;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(limit, startingAfter, endingBefore, count, _callback);
        }


        /**
         * Execute getList request
         * @return TermsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public TermsResponse execute() throws ApiException {
            ApiResponse<TermsResponse> localVarResp = getListWithHttpInfo(limit, startingAfter, endingBefore, count);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;TermsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TermsResponse> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(limit, startingAfter, endingBefore, count);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TermsResponse> _callback) throws ApiException {
            return getListAsync(limit, startingAfter, endingBefore, count, _callback);
        }
    }

    /**
     * 
     * Returns a list of terms
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
    private okhttp3.Call getSchoolsForTermCall(String id, Integer limit, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terms/{id}/schools"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchoolsForTermValidateBeforeCall(String id, Integer limit, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSchoolsForTerm(Async)");
        }

        return getSchoolsForTermCall(id, limit, startingAfter, endingBefore, _callback);

    }


    private ApiResponse<SchoolsResponse> getSchoolsForTermWithHttpInfo(String id, Integer limit, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getSchoolsForTermValidateBeforeCall(id, limit, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<SchoolsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSchoolsForTermAsync(String id, Integer limit, String startingAfter, String endingBefore, final ApiCallback<SchoolsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchoolsForTermValidateBeforeCall(id, limit, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<SchoolsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSchoolsForTermRequestBuilder {
        private final String id;
        private Integer limit;
        private String startingAfter;
        private String endingBefore;

        private GetSchoolsForTermRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set limit
         * @param limit  (optional)
         * @return GetSchoolsForTermRequestBuilder
         */
        public GetSchoolsForTermRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set startingAfter
         * @param startingAfter  (optional)
         * @return GetSchoolsForTermRequestBuilder
         */
        public GetSchoolsForTermRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore  (optional)
         * @return GetSchoolsForTermRequestBuilder
         */
        public GetSchoolsForTermRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Build call for getSchoolsForTerm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSchoolsForTermCall(id, limit, startingAfter, endingBefore, _callback);
        }


        /**
         * Execute getSchoolsForTerm request
         * @return SchoolsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public SchoolsResponse execute() throws ApiException {
            ApiResponse<SchoolsResponse> localVarResp = getSchoolsForTermWithHttpInfo(id, limit, startingAfter, endingBefore);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSchoolsForTerm request with HTTP info returned
         * @return ApiResponse&lt;SchoolsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchoolsResponse> executeWithHttpInfo() throws ApiException {
            return getSchoolsForTermWithHttpInfo(id, limit, startingAfter, endingBefore);
        }

        /**
         * Execute getSchoolsForTerm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchoolsResponse> _callback) throws ApiException {
            return getSchoolsForTermAsync(id, limit, startingAfter, endingBefore, _callback);
        }
    }

    /**
     * 
     * Returns the schools for a term
     * @param id  (required)
     * @return GetSchoolsForTermRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
     </table>
     */
    public GetSchoolsForTermRequestBuilder getSchoolsForTerm(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetSchoolsForTermRequestBuilder(id);
    }
    private okhttp3.Call getSectionsCall(String id, Integer limit, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terms/{id}/sections"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSectionsValidateBeforeCall(String id, Integer limit, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSections(Async)");
        }

        return getSectionsCall(id, limit, startingAfter, endingBefore, _callback);

    }


    private ApiResponse<SectionsResponse> getSectionsWithHttpInfo(String id, Integer limit, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getSectionsValidateBeforeCall(id, limit, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<SectionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSectionsAsync(String id, Integer limit, String startingAfter, String endingBefore, final ApiCallback<SectionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSectionsValidateBeforeCall(id, limit, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<SectionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSectionsRequestBuilder {
        private final String id;
        private Integer limit;
        private String startingAfter;
        private String endingBefore;

        private GetSectionsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set limit
         * @param limit  (optional)
         * @return GetSectionsRequestBuilder
         */
        public GetSectionsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set startingAfter
         * @param startingAfter  (optional)
         * @return GetSectionsRequestBuilder
         */
        public GetSectionsRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore  (optional)
         * @return GetSectionsRequestBuilder
         */
        public GetSectionsRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Build call for getSections
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSectionsCall(id, limit, startingAfter, endingBefore, _callback);
        }


        /**
         * Execute getSections request
         * @return SectionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public SectionsResponse execute() throws ApiException {
            ApiResponse<SectionsResponse> localVarResp = getSectionsWithHttpInfo(id, limit, startingAfter, endingBefore);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSections request with HTTP info returned
         * @return ApiResponse&lt;SectionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SectionsResponse> executeWithHttpInfo() throws ApiException {
            return getSectionsWithHttpInfo(id, limit, startingAfter, endingBefore);
        }

        /**
         * Execute getSections request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SectionsResponse> _callback) throws ApiException {
            return getSectionsAsync(id, limit, startingAfter, endingBefore, _callback);
        }
    }

    /**
     * 
     * Returns the sections for a term
     * @param id  (required)
     * @return GetSectionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
     </table>
     */
    public GetSectionsRequestBuilder getSections(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetSectionsRequestBuilder(id);
    }
    private okhttp3.Call getSpecificTermCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/terms/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificTermValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSpecificTerm(Async)");
        }

        return getSpecificTermCall(id, _callback);

    }


    private ApiResponse<TermResponse> getSpecificTermWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSpecificTermValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TermResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificTermAsync(String id, final ApiCallback<TermResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificTermValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TermResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificTermRequestBuilder {
        private final String id;

        private GetSpecificTermRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getSpecificTerm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificTermCall(id, _callback);
        }


        /**
         * Execute getSpecificTerm request
         * @return TermResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public TermResponse execute() throws ApiException {
            ApiResponse<TermResponse> localVarResp = getSpecificTermWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificTerm request with HTTP info returned
         * @return ApiResponse&lt;TermResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TermResponse> executeWithHttpInfo() throws ApiException {
            return getSpecificTermWithHttpInfo(id);
        }

        /**
         * Execute getSpecificTerm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TermResponse> _callback) throws ApiException {
            return getSpecificTermAsync(id, _callback);
        }
    }

    /**
     * 
     * Returns a specific term
     * @param id  (required)
     * @return GetSpecificTermRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK Response </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificTermRequestBuilder getSpecificTerm(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetSpecificTermRequestBuilder(id);
    }
}
