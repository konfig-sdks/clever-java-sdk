/*
 * Data API
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Credentials;
import com.konfigthis.client.model.Disability;
import com.konfigthis.client.model.Location;
import com.konfigthis.client.model.PreferredName;
import com.konfigthis.client.model.SchoolEnrollment;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Student
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Student {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_CREDENTIALS = "credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  private Credentials credentials;

  public static final String SERIALIZED_NAME_DISABILITY = "disability";
  @SerializedName(SERIALIZED_NAME_DISABILITY)
  private Disability disability;

  public static final String SERIALIZED_NAME_DOB = "dob";
  @SerializedName(SERIALIZED_NAME_DOB)
  private String dob;

  /**
   * Gets or Sets ellStatus
   */
  @JsonAdapter(EllStatusEnum.Adapter.class)
 public enum EllStatusEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    EllStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EllStatusEnum fromValue(String value) {
      for (EllStatusEnum b : EllStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EllStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EllStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EllStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EllStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ELL_STATUS = "ell_status";
  @SerializedName(SERIALIZED_NAME_ELL_STATUS)
  private EllStatusEnum ellStatus;

  public static final String SERIALIZED_NAME_ENROLLMENTS = "enrollments";
  @SerializedName(SERIALIZED_NAME_ENROLLMENTS)
  private List<SchoolEnrollment> enrollments = null;

  public static final String SERIALIZED_NAME_EXT = "ext";
  @SerializedName(SERIALIZED_NAME_EXT)
  private Object ext;

  /**
   * Gets or Sets frlStatus
   */
  @JsonAdapter(FrlStatusEnum.Adapter.class)
 public enum FrlStatusEnum {
    FREE("Free"),
    
    REDUCED("Reduced"),
    
    PAID("Paid"),
    
    OTHER("Other"),
    
    EMPTY("");

    private String value;

    FrlStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FrlStatusEnum fromValue(String value) {
      for (FrlStatusEnum b : FrlStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FrlStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrlStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FrlStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FrlStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FRL_STATUS = "frl_status";
  @SerializedName(SERIALIZED_NAME_FRL_STATUS)
  private FrlStatusEnum frlStatus;

  /**
   * Gets or Sets gender
   */
  @JsonAdapter(GenderEnum.Adapter.class)
 public enum GenderEnum {
    M("M"),
    
    F("F"),
    
    X("X"),
    
    EMPTY("");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private GenderEnum gender;

  /**
   * Gets or Sets giftedStatus
   */
  @JsonAdapter(GiftedStatusEnum.Adapter.class)
 public enum GiftedStatusEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    GiftedStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GiftedStatusEnum fromValue(String value) {
      for (GiftedStatusEnum b : GiftedStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GiftedStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GiftedStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GiftedStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GiftedStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GIFTED_STATUS = "gifted_status";
  @SerializedName(SERIALIZED_NAME_GIFTED_STATUS)
  private GiftedStatusEnum giftedStatus;

  /**
   * Gets or Sets grade
   */
  @JsonAdapter(GradeEnum.Adapter.class)
 public enum GradeEnum {
    INFANTTODDLER("InfantToddler"),
    
    PRESCHOOL("Preschool"),
    
    PREKINDERGARTEN("PreKindergarten"),
    
    TRANSITIONALKINDERGARTEN("TransitionalKindergarten"),
    
    KINDERGARTEN("Kindergarten"),
    
    _1("1"),
    
    _2("2"),
    
    _3("3"),
    
    _4("4"),
    
    _5("5"),
    
    _6("6"),
    
    _7("7"),
    
    _8("8"),
    
    _9("9"),
    
    _10("10"),
    
    _11("11"),
    
    _12("12"),
    
    _13("13"),
    
    POSTGRADUATE("PostGraduate"),
    
    UNGRADED("Ungraded"),
    
    OTHER("Other"),
    
    EMPTY("");

    private String value;

    GradeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GradeEnum fromValue(String value) {
      for (GradeEnum b : GradeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GradeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GradeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GradeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GradeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private GradeEnum grade;

  public static final String SERIALIZED_NAME_GRADUATION_YEAR = "graduation_year";
  @SerializedName(SERIALIZED_NAME_GRADUATION_YEAR)
  private String graduationYear;

  /**
   * Gets or Sets hispanicEthnicity
   */
  @JsonAdapter(HispanicEthnicityEnum.Adapter.class)
 public enum HispanicEthnicityEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    HispanicEthnicityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HispanicEthnicityEnum fromValue(String value) {
      for (HispanicEthnicityEnum b : HispanicEthnicityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<HispanicEthnicityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HispanicEthnicityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HispanicEthnicityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HispanicEthnicityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_HISPANIC_ETHNICITY = "hispanic_ethnicity";
  @SerializedName(SERIALIZED_NAME_HISPANIC_ETHNICITY)
  private HispanicEthnicityEnum hispanicEthnicity;

  /**
   * Gets or Sets homeLanguage
   */
  @JsonAdapter(HomeLanguageEnum.Adapter.class)
 public enum HomeLanguageEnum {
    BASQUE("Basque"),
    
    PORTUGUESE("Portuguese"),
    
    HUNGARIAN("Hungarian"),
    
    HMONG("Hmong"),
    
    URDU("Urdu"),
    
    LATVIAN("Latvian"),
    
    HAUSA("Hausa"),
    
    SLOVENIAN("Slovenian"),
    
    CHINESE_MANDARIN_("Chinese (Mandarin)"),
    
    RUSSIAN("Russian"),
    
    ARABIC("Arabic"),
    
    TELUGU("Telugu"),
    
    AFRIKAANS("Afrikaans"),
    
    TAMIL("Tamil"),
    
    IRISH("Irish"),
    
    UZBEK("Uzbek"),
    
    NORWEGIAN("Norwegian"),
    
    SERBIAN("Serbian"),
    
    KHMER("Khmer"),
    
    FARSI("Farsi"),
    
    LAO("Lao"),
    
    GUJARATI("Gujarati"),
    
    YIDDISH("Yiddish"),
    
    LITHUANIAN("Lithuanian"),
    
    MONGOLIAN("Mongolian"),
    
    SAMOAN("Samoan"),
    
    BENGALI("Bengali"),
    
    CORSICAN("Corsican"),
    
    ROMANIAN("Romanian"),
    
    JAVANESE("Javanese"),
    
    DANISH("Danish"),
    
    SCOTS_GAELIC("Scots Gaelic"),
    
    BURMESE("Burmese"),
    
    KINYARWANDA("Kinyarwanda"),
    
    SWAHILI("Swahili"),
    
    YORUBA("Yoruba"),
    
    UYGHUR("Uyghur"),
    
    HINDI("Hindi"),
    
    AZERBAIJANI("Azerbaijani"),
    
    CABO_VERDEAN("Cabo Verdean"),
    
    HAITIAN_CREOLE("Haitian Creole"),
    
    AMHARIC("Amharic"),
    
    MAORI("Maori"),
    
    SOMALI("Somali"),
    
    ENGLISH("English"),
    
    HAWAIIAN("Hawaiian"),
    
    MALTESE("Maltese"),
    
    THAI("Thai"),
    
    SLOVAK("Slovak"),
    
    NEPALI("Nepali"),
    
    BOSNIAN("Bosnian"),
    
    MARATHI("Marathi"),
    
    FRISIAN("Frisian"),
    
    SWEDISH("Swedish"),
    
    KAZAKH("Kazakh"),
    
    GERMAN("German"),
    
    TURKISH("Turkish"),
    
    CHINESE("Chinese"),
    
    LUXEMBOURGISH("Luxembourgish"),
    
    ARMENIAN("Armenian"),
    
    DARI("Dari"),
    
    MACEDONIAN("Macedonian"),
    
    KAREN("Karen"),
    
    ILOKO("Iloko"),
    
    IGBO("Igbo"),
    
    KANNADA("Kannada"),
    
    GALICIAN("Galician"),
    
    CEBUANO("Cebuano"),
    
    PUNJABI("Punjabi"),
    
    INDONESIAN("Indonesian"),
    
    ESTONIAN("Estonian"),
    
    ODIA("Odia"),
    
    SPANISH("Spanish"),
    
    FILIPINO("Filipino"),
    
    ALBANIAN("Albanian"),
    
    KOREAN("Korean"),
    
    CROATIAN("Croatian"),
    
    JAPANESE("Japanese"),
    
    BULGARIAN("Bulgarian"),
    
    CATALAN("Catalan"),
    
    POLISH("Polish"),
    
    SINHALA("Sinhala"),
    
    OTHER("Other"),
    
    ICELANDIC("Icelandic"),
    
    TATAR("Tatar"),
    
    UKRAINIAN("Ukrainian"),
    
    TAJIK("Tajik"),
    
    ITALIAN("Italian"),
    
    FRENCH("French"),
    
    MALAYALAM("Malayalam"),
    
    CHICHEWA("Chichewa"),
    
    KURDISH_KURMANJI_("Kurdish (Kurmanji)"),
    
    CZECH("Czech"),
    
    XHOSA("Xhosa"),
    
    HEBREW("Hebrew"),
    
    GEORGIAN("Georgian"),
    
    OROMO("Oromo"),
    
    SHONA("Shona"),
    
    SINDHI("Sindhi"),
    
    SESOTHO("Sesotho"),
    
    TAGALOG("Tagalog"),
    
    MALAGASY("Malagasy"),
    
    TIGRINYA("Tigrinya"),
    
    WELSH("Welsh"),
    
    TURKMEN("Turkmen"),
    
    MALAY("Malay"),
    
    MARSHALLESE("Marshallese"),
    
    BELARUSIAN("Belarusian"),
    
    DUTCH("Dutch"),
    
    FINNISH("Finnish"),
    
    GREEK("Greek"),
    
    KYRGYZ("Kyrgyz"),
    
    ZULU("Zulu"),
    
    SUNDANESE("Sundanese"),
    
    VIETNAMESE("Vietnamese"),
    
    PASHTO("Pashto");

    private String value;

    HomeLanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HomeLanguageEnum fromValue(String value) {
      for (HomeLanguageEnum b : HomeLanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<HomeLanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HomeLanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HomeLanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HomeLanguageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_HOME_LANGUAGE = "home_language";
  @SerializedName(SERIALIZED_NAME_HOME_LANGUAGE)
  private HomeLanguageEnum homeLanguage;

  /**
   * Gets or Sets homeLanguageCode
   */
  @JsonAdapter(HomeLanguageCodeEnum.Adapter.class)
 public enum HomeLanguageCodeEnum {
    HAU("hau"),
    
    ILO("ilo"),
    
    DAN("dan"),
    
    SOM("som"),
    
    XHO("xho"),
    
    SLV("slv"),
    
    BOS("bos"),
    
    COS("cos"),
    
    CES("ces"),
    
    MLG("mlg"),
    
    VIE("vie"),
    
    BEL("bel"),
    
    HIN("hin"),
    
    HUN("hun"),
    
    MON("mon"),
    
    PAN("pan"),
    
    TGK("tgk"),
    
    HEB("heb"),
    
    PRS("prs"),
    
    MLT("mlt"),
    
    PUS("pus"),
    
    TIR("tir"),
    
    ENG("eng"),
    
    MAR("mar"),
    
    NLD("nld"),
    
    EST("est"),
    
    ZHO("zho"),
    
    FAS("fas"),
    
    FRY("fry"),
    
    JPN("jpn"),
    
    AZE("aze"),
    
    RUS("rus"),
    
    GLA("gla"),
    
    YOR("yor"),
    
    CMN("cmn"),
    
    BUL("bul"),
    
    FIN("fin"),
    
    HMN("hmn"),
    
    ITA("ita"),
    
    POL("pol"),
    
    ARA("ara"),
    
    ELL("ell"),
    
    KHM("khm"),
    
    MKD("mkd"),
    
    CPP("cpp"),
    
    IBO("ibo"),
    
    URD("urd"),
    
    CYM("cym"),
    
    HAT("hat"),
    
    LAO("lao"),
    
    LTZ("ltz"),
    
    SND("snd"),
    
    SWA("swa"),
    
    MYA("mya"),
    
    ORI("ori"),
    
    KAT("kat"),
    
    SMO("smo"),
    
    SPA("spa"),
    
    KOR("kor"),
    
    NOB("nob"),
    
    RON("ron"),
    
    THA("tha"),
    
    IND("ind"),
    
    FRA("fra"),
    
    TEL("tel"),
    
    HYE("hye"),
    
    GUJ("guj"),
    
    ISL("isl"),
    
    MSA("msa"),
    
    SLK("slk"),
    
    SWE("swe"),
    
    TUK("tuk"),
    
    EUS("eus"),
    
    KAZ("kaz"),
    
    MAL("mal"),
    
    KAN("kan"),
    
    AMH("amh"),
    
    ORM("orm"),
    
    AFR("afr"),
    
    FIL("fil"),
    
    HAW("haw"),
    
    LAV("lav"),
    
    SIN("sin"),
    
    YID("yid"),
    
    BEN("ben"),
    
    KIR("kir"),
    
    MRI("mri"),
    
    TAM("tam"),
    
    GLG("glg"),
    
    CEB("ceb"),
    
    TAT("tat"),
    
    ZUL("zul"),
    
    LIT("lit"),
    
    NEP("nep"),
    
    POR("por"),
    
    SOT("sot"),
    
    OTHER("other"),
    
    NYA("nya"),
    
    SUN("sun"),
    
    CAT("cat"),
    
    TGL("tgl"),
    
    UKR("ukr"),
    
    UZB("uzb"),
    
    GLE("gle"),
    
    SRP("srp"),
    
    DEU("deu"),
    
    JAV("jav"),
    
    KUR("kur"),
    
    MAH("mah"),
    
    SNA("sna"),
    
    UIG("uig"),
    
    KIN("kin"),
    
    HRV("hrv"),
    
    KAR("kar"),
    
    TUR("tur"),
    
    SQI("sqi");

    private String value;

    HomeLanguageCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HomeLanguageCodeEnum fromValue(String value) {
      for (HomeLanguageCodeEnum b : HomeLanguageCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<HomeLanguageCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HomeLanguageCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HomeLanguageCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HomeLanguageCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_HOME_LANGUAGE_CODE = "home_language_code";
  @SerializedName(SERIALIZED_NAME_HOME_LANGUAGE_CODE)
  private HomeLanguageCodeEnum homeLanguageCode;

  public static final String SERIALIZED_NAME_IEP_STATUS = "iep_status";
  @SerializedName(SERIALIZED_NAME_IEP_STATUS)
  private String iepStatus;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "last_modified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private String lastModified;

  public static final String SERIALIZED_NAME_LEGACY_ID = "legacy_id";
  @SerializedName(SERIALIZED_NAME_LEGACY_ID)
  private String legacyId;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_PREFERRED_NAME = "preferred_name";
  @SerializedName(SERIALIZED_NAME_PREFERRED_NAME)
  private PreferredName preferredName;

  /**
   * Gets or Sets race
   */
  @JsonAdapter(RaceEnum.Adapter.class)
 public enum RaceEnum {
    CAUCASIAN("Caucasian"),
    
    ASIAN("Asian"),
    
    BLACK_OR_AFRICAN_AMERICAN("Black or African American"),
    
    AMERICAN_INDIAN("American Indian"),
    
    HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER("Hawaiian or Other Pacific Islander"),
    
    TWO_OR_MORE_RACES("Two or More Races"),
    
    UNKNOWN("Unknown"),
    
    EMPTY("");

    private String value;

    RaceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RaceEnum fromValue(String value) {
      for (RaceEnum b : RaceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RaceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RaceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RaceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RaceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RACE = "race";
  @SerializedName(SERIALIZED_NAME_RACE)
  private RaceEnum race;

  public static final String SERIALIZED_NAME_SCHOOL = "school";
  @SerializedName(SERIALIZED_NAME_SCHOOL)
  private String school;

  public static final String SERIALIZED_NAME_SCHOOLS = "schools";
  @SerializedName(SERIALIZED_NAME_SCHOOLS)
  private List<String> schools = null;

  /**
   * Gets or Sets section504Status
   */
  @JsonAdapter(Section504StatusEnum.Adapter.class)
 public enum Section504StatusEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    Section504StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Section504StatusEnum fromValue(String value) {
      for (Section504StatusEnum b : Section504StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Section504StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Section504StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Section504StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return Section504StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SECTION504_STATUS = "section_504_status";
  @SerializedName(SERIALIZED_NAME_SECTION504_STATUS)
  private Section504StatusEnum section504Status;

  public static final String SERIALIZED_NAME_SIS_ID = "sis_id";
  @SerializedName(SERIALIZED_NAME_SIS_ID)
  private String sisId;

  public static final String SERIALIZED_NAME_STATE_ID = "state_id";
  @SerializedName(SERIALIZED_NAME_STATE_ID)
  private String stateId;

  public static final String SERIALIZED_NAME_STUDENT_NUMBER = "student_number";
  @SerializedName(SERIALIZED_NAME_STUDENT_NUMBER)
  private String studentNumber;

  public Student() {
  }

  public Student created(String created) {
    
    
    
    
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCreated() {
    return created;
  }


  public void setCreated(String created) {
    
    
    
    this.created = created;
  }


  public Student credentials(Credentials credentials) {
    
    
    
    
    this.credentials = credentials;
    return this;
  }

   /**
   * Get credentials
   * @return credentials
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Credentials getCredentials() {
    return credentials;
  }


  public void setCredentials(Credentials credentials) {
    
    
    
    this.credentials = credentials;
  }


  public Student disability(Disability disability) {
    
    
    
    
    this.disability = disability;
    return this;
  }

   /**
   * Get disability
   * @return disability
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Disability getDisability() {
    return disability;
  }


  public void setDisability(Disability disability) {
    
    
    
    this.disability = disability;
  }


  public Student dob(String dob) {
    
    
    
    
    this.dob = dob;
    return this;
  }

   /**
   * Get dob
   * @return dob
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDob() {
    return dob;
  }


  public void setDob(String dob) {
    
    
    
    this.dob = dob;
  }


  public Student ellStatus(EllStatusEnum ellStatus) {
    
    
    
    
    this.ellStatus = ellStatus;
    return this;
  }

   /**
   * Get ellStatus
   * @return ellStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EllStatusEnum getEllStatus() {
    return ellStatus;
  }


  public void setEllStatus(EllStatusEnum ellStatus) {
    
    
    
    this.ellStatus = ellStatus;
  }


  public Student enrollments(List<SchoolEnrollment> enrollments) {
    
    
    
    
    this.enrollments = enrollments;
    return this;
  }

  public Student addEnrollmentsItem(SchoolEnrollment enrollmentsItem) {
    if (this.enrollments == null) {
      this.enrollments = new ArrayList<>();
    }
    this.enrollments.add(enrollmentsItem);
    return this;
  }

   /**
   * Get enrollments
   * @return enrollments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SchoolEnrollment> getEnrollments() {
    return enrollments;
  }


  public void setEnrollments(List<SchoolEnrollment> enrollments) {
    
    
    
    this.enrollments = enrollments;
  }


  public Student ext(Object ext) {
    
    
    
    
    this.ext = ext;
    return this;
  }

   /**
   * Get ext
   * @return ext
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getExt() {
    return ext;
  }


  public void setExt(Object ext) {
    
    
    
    this.ext = ext;
  }


  public Student frlStatus(FrlStatusEnum frlStatus) {
    
    
    
    
    this.frlStatus = frlStatus;
    return this;
  }

   /**
   * Get frlStatus
   * @return frlStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FrlStatusEnum getFrlStatus() {
    return frlStatus;
  }


  public void setFrlStatus(FrlStatusEnum frlStatus) {
    
    
    
    this.frlStatus = frlStatus;
  }


  public Student gender(GenderEnum gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GenderEnum getGender() {
    return gender;
  }


  public void setGender(GenderEnum gender) {
    
    
    
    this.gender = gender;
  }


  public Student giftedStatus(GiftedStatusEnum giftedStatus) {
    
    
    
    
    this.giftedStatus = giftedStatus;
    return this;
  }

   /**
   * Get giftedStatus
   * @return giftedStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GiftedStatusEnum getGiftedStatus() {
    return giftedStatus;
  }


  public void setGiftedStatus(GiftedStatusEnum giftedStatus) {
    
    
    
    this.giftedStatus = giftedStatus;
  }


  public Student grade(GradeEnum grade) {
    
    
    
    
    this.grade = grade;
    return this;
  }

   /**
   * Get grade
   * @return grade
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GradeEnum getGrade() {
    return grade;
  }


  public void setGrade(GradeEnum grade) {
    
    
    
    this.grade = grade;
  }


  public Student graduationYear(String graduationYear) {
    
    
    
    
    this.graduationYear = graduationYear;
    return this;
  }

   /**
   * Get graduationYear
   * @return graduationYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGraduationYear() {
    return graduationYear;
  }


  public void setGraduationYear(String graduationYear) {
    
    
    
    this.graduationYear = graduationYear;
  }


  public Student hispanicEthnicity(HispanicEthnicityEnum hispanicEthnicity) {
    
    
    
    
    this.hispanicEthnicity = hispanicEthnicity;
    return this;
  }

   /**
   * Get hispanicEthnicity
   * @return hispanicEthnicity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public HispanicEthnicityEnum getHispanicEthnicity() {
    return hispanicEthnicity;
  }


  public void setHispanicEthnicity(HispanicEthnicityEnum hispanicEthnicity) {
    
    
    
    this.hispanicEthnicity = hispanicEthnicity;
  }


  public Student homeLanguage(HomeLanguageEnum homeLanguage) {
    
    
    
    
    this.homeLanguage = homeLanguage;
    return this;
  }

   /**
   * Get homeLanguage
   * @return homeLanguage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public HomeLanguageEnum getHomeLanguage() {
    return homeLanguage;
  }


  public void setHomeLanguage(HomeLanguageEnum homeLanguage) {
    
    
    
    this.homeLanguage = homeLanguage;
  }


  public Student homeLanguageCode(HomeLanguageCodeEnum homeLanguageCode) {
    
    
    
    
    this.homeLanguageCode = homeLanguageCode;
    return this;
  }

   /**
   * Get homeLanguageCode
   * @return homeLanguageCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public HomeLanguageCodeEnum getHomeLanguageCode() {
    return homeLanguageCode;
  }


  public void setHomeLanguageCode(HomeLanguageCodeEnum homeLanguageCode) {
    
    
    
    this.homeLanguageCode = homeLanguageCode;
  }


  public Student iepStatus(String iepStatus) {
    
    
    
    
    this.iepStatus = iepStatus;
    return this;
  }

   /**
   * Get iepStatus
   * @return iepStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIepStatus() {
    return iepStatus;
  }


  public void setIepStatus(String iepStatus) {
    
    
    
    this.iepStatus = iepStatus;
  }


  public Student lastModified(String lastModified) {
    
    
    
    
    this.lastModified = lastModified;
    return this;
  }

   /**
   * Get lastModified
   * @return lastModified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastModified() {
    return lastModified;
  }


  public void setLastModified(String lastModified) {
    
    
    
    this.lastModified = lastModified;
  }


  public Student legacyId(String legacyId) {
    
    
    
    
    this.legacyId = legacyId;
    return this;
  }

   /**
   * Get legacyId
   * @return legacyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLegacyId() {
    return legacyId;
  }


  public void setLegacyId(String legacyId) {
    
    
    
    this.legacyId = legacyId;
  }


  public Student location(Location location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Location getLocation() {
    return location;
  }


  public void setLocation(Location location) {
    
    
    
    this.location = location;
  }


  public Student preferredName(PreferredName preferredName) {
    
    
    
    
    this.preferredName = preferredName;
    return this;
  }

   /**
   * Get preferredName
   * @return preferredName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PreferredName getPreferredName() {
    return preferredName;
  }


  public void setPreferredName(PreferredName preferredName) {
    
    
    
    this.preferredName = preferredName;
  }


  public Student race(RaceEnum race) {
    
    
    
    
    this.race = race;
    return this;
  }

   /**
   * Get race
   * @return race
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RaceEnum getRace() {
    return race;
  }


  public void setRace(RaceEnum race) {
    
    
    
    this.race = race;
  }


  public Student school(String school) {
    
    
    
    
    this.school = school;
    return this;
  }

   /**
   * Get school
   * @return school
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSchool() {
    return school;
  }


  public void setSchool(String school) {
    
    
    
    this.school = school;
  }


  public Student schools(List<String> schools) {
    
    
    
    
    this.schools = schools;
    return this;
  }

  public Student addSchoolsItem(String schoolsItem) {
    if (this.schools == null) {
      this.schools = new ArrayList<>();
    }
    this.schools.add(schoolsItem);
    return this;
  }

   /**
   * Get schools
   * @return schools
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSchools() {
    return schools;
  }


  public void setSchools(List<String> schools) {
    
    
    
    this.schools = schools;
  }


  public Student section504Status(Section504StatusEnum section504Status) {
    
    
    
    
    this.section504Status = section504Status;
    return this;
  }

   /**
   * Get section504Status
   * @return section504Status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Section504StatusEnum getSection504Status() {
    return section504Status;
  }


  public void setSection504Status(Section504StatusEnum section504Status) {
    
    
    
    this.section504Status = section504Status;
  }


  public Student sisId(String sisId) {
    
    
    
    
    this.sisId = sisId;
    return this;
  }

   /**
   * Get sisId
   * @return sisId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSisId() {
    return sisId;
  }


  public void setSisId(String sisId) {
    
    
    
    this.sisId = sisId;
  }


  public Student stateId(String stateId) {
    
    
    
    
    this.stateId = stateId;
    return this;
  }

   /**
   * Get stateId
   * @return stateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStateId() {
    return stateId;
  }


  public void setStateId(String stateId) {
    
    
    
    this.stateId = stateId;
  }


  public Student studentNumber(String studentNumber) {
    
    
    
    
    this.studentNumber = studentNumber;
    return this;
  }

   /**
   * Get studentNumber
   * @return studentNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStudentNumber() {
    return studentNumber;
  }


  public void setStudentNumber(String studentNumber) {
    
    
    
    this.studentNumber = studentNumber;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Student instance itself
   */
  public Student putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Student student = (Student) o;
    return Objects.equals(this.created, student.created) &&
        Objects.equals(this.credentials, student.credentials) &&
        Objects.equals(this.disability, student.disability) &&
        Objects.equals(this.dob, student.dob) &&
        Objects.equals(this.ellStatus, student.ellStatus) &&
        Objects.equals(this.enrollments, student.enrollments) &&
        Objects.equals(this.ext, student.ext) &&
        Objects.equals(this.frlStatus, student.frlStatus) &&
        Objects.equals(this.gender, student.gender) &&
        Objects.equals(this.giftedStatus, student.giftedStatus) &&
        Objects.equals(this.grade, student.grade) &&
        Objects.equals(this.graduationYear, student.graduationYear) &&
        Objects.equals(this.hispanicEthnicity, student.hispanicEthnicity) &&
        Objects.equals(this.homeLanguage, student.homeLanguage) &&
        Objects.equals(this.homeLanguageCode, student.homeLanguageCode) &&
        Objects.equals(this.iepStatus, student.iepStatus) &&
        Objects.equals(this.lastModified, student.lastModified) &&
        Objects.equals(this.legacyId, student.legacyId) &&
        Objects.equals(this.location, student.location) &&
        Objects.equals(this.preferredName, student.preferredName) &&
        Objects.equals(this.race, student.race) &&
        Objects.equals(this.school, student.school) &&
        Objects.equals(this.schools, student.schools) &&
        Objects.equals(this.section504Status, student.section504Status) &&
        Objects.equals(this.sisId, student.sisId) &&
        Objects.equals(this.stateId, student.stateId) &&
        Objects.equals(this.studentNumber, student.studentNumber)&&
        Objects.equals(this.additionalProperties, student.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, credentials, disability, dob, ellStatus, enrollments, ext, frlStatus, gender, giftedStatus, grade, graduationYear, hispanicEthnicity, homeLanguage, homeLanguageCode, iepStatus, lastModified, legacyId, location, preferredName, race, school, schools, section504Status, sisId, stateId, studentNumber, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Student {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    disability: ").append(toIndentedString(disability)).append("\n");
    sb.append("    dob: ").append(toIndentedString(dob)).append("\n");
    sb.append("    ellStatus: ").append(toIndentedString(ellStatus)).append("\n");
    sb.append("    enrollments: ").append(toIndentedString(enrollments)).append("\n");
    sb.append("    ext: ").append(toIndentedString(ext)).append("\n");
    sb.append("    frlStatus: ").append(toIndentedString(frlStatus)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    giftedStatus: ").append(toIndentedString(giftedStatus)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    graduationYear: ").append(toIndentedString(graduationYear)).append("\n");
    sb.append("    hispanicEthnicity: ").append(toIndentedString(hispanicEthnicity)).append("\n");
    sb.append("    homeLanguage: ").append(toIndentedString(homeLanguage)).append("\n");
    sb.append("    homeLanguageCode: ").append(toIndentedString(homeLanguageCode)).append("\n");
    sb.append("    iepStatus: ").append(toIndentedString(iepStatus)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    legacyId: ").append(toIndentedString(legacyId)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    preferredName: ").append(toIndentedString(preferredName)).append("\n");
    sb.append("    race: ").append(toIndentedString(race)).append("\n");
    sb.append("    school: ").append(toIndentedString(school)).append("\n");
    sb.append("    schools: ").append(toIndentedString(schools)).append("\n");
    sb.append("    section504Status: ").append(toIndentedString(section504Status)).append("\n");
    sb.append("    sisId: ").append(toIndentedString(sisId)).append("\n");
    sb.append("    stateId: ").append(toIndentedString(stateId)).append("\n");
    sb.append("    studentNumber: ").append(toIndentedString(studentNumber)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("credentials");
    openapiFields.add("disability");
    openapiFields.add("dob");
    openapiFields.add("ell_status");
    openapiFields.add("enrollments");
    openapiFields.add("ext");
    openapiFields.add("frl_status");
    openapiFields.add("gender");
    openapiFields.add("gifted_status");
    openapiFields.add("grade");
    openapiFields.add("graduation_year");
    openapiFields.add("hispanic_ethnicity");
    openapiFields.add("home_language");
    openapiFields.add("home_language_code");
    openapiFields.add("iep_status");
    openapiFields.add("last_modified");
    openapiFields.add("legacy_id");
    openapiFields.add("location");
    openapiFields.add("preferred_name");
    openapiFields.add("race");
    openapiFields.add("school");
    openapiFields.add("schools");
    openapiFields.add("section_504_status");
    openapiFields.add("sis_id");
    openapiFields.add("state_id");
    openapiFields.add("student_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Student
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Student.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Student is not found in the empty JSON string", Student.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      // validate the optional field `credentials`
      if (jsonObj.get("credentials") != null && !jsonObj.get("credentials").isJsonNull()) {
        Credentials.validateJsonObject(jsonObj.getAsJsonObject("credentials"));
      }
      // validate the optional field `disability`
      if (jsonObj.get("disability") != null && !jsonObj.get("disability").isJsonNull()) {
        Disability.validateJsonObject(jsonObj.getAsJsonObject("disability"));
      }
      if (!jsonObj.get("dob").isJsonNull() && (jsonObj.get("dob") != null && !jsonObj.get("dob").isJsonNull()) && !jsonObj.get("dob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dob").toString()));
      }
      if (!jsonObj.get("ell_status").isJsonNull() && (jsonObj.get("ell_status") != null && !jsonObj.get("ell_status").isJsonNull()) && !jsonObj.get("ell_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ell_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ell_status").toString()));
      }
      if (jsonObj.get("enrollments") != null && !jsonObj.get("enrollments").isJsonNull()) {
        JsonArray jsonArrayenrollments = jsonObj.getAsJsonArray("enrollments");
        if (jsonArrayenrollments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enrollments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enrollments` to be an array in the JSON string but got `%s`", jsonObj.get("enrollments").toString()));
          }

          // validate the optional field `enrollments` (array)
          for (int i = 0; i < jsonArrayenrollments.size(); i++) {
            SchoolEnrollment.validateJsonObject(jsonArrayenrollments.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("frl_status").isJsonNull() && (jsonObj.get("frl_status") != null && !jsonObj.get("frl_status").isJsonNull()) && !jsonObj.get("frl_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frl_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frl_status").toString()));
      }
      if (!jsonObj.get("gender").isJsonNull() && (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if (!jsonObj.get("gifted_status").isJsonNull() && (jsonObj.get("gifted_status") != null && !jsonObj.get("gifted_status").isJsonNull()) && !jsonObj.get("gifted_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gifted_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gifted_status").toString()));
      }
      if (!jsonObj.get("grade").isJsonNull() && (jsonObj.get("grade") != null && !jsonObj.get("grade").isJsonNull()) && !jsonObj.get("grade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grade").toString()));
      }
      if (!jsonObj.get("graduation_year").isJsonNull() && (jsonObj.get("graduation_year") != null && !jsonObj.get("graduation_year").isJsonNull()) && !jsonObj.get("graduation_year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `graduation_year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("graduation_year").toString()));
      }
      if (!jsonObj.get("hispanic_ethnicity").isJsonNull() && (jsonObj.get("hispanic_ethnicity") != null && !jsonObj.get("hispanic_ethnicity").isJsonNull()) && !jsonObj.get("hispanic_ethnicity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hispanic_ethnicity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hispanic_ethnicity").toString()));
      }
      if (!jsonObj.get("home_language").isJsonNull() && (jsonObj.get("home_language") != null && !jsonObj.get("home_language").isJsonNull()) && !jsonObj.get("home_language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_language").toString()));
      }
      if (!jsonObj.get("home_language_code").isJsonNull() && (jsonObj.get("home_language_code") != null && !jsonObj.get("home_language_code").isJsonNull()) && !jsonObj.get("home_language_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_language_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_language_code").toString()));
      }
      if (!jsonObj.get("iep_status").isJsonNull() && (jsonObj.get("iep_status") != null && !jsonObj.get("iep_status").isJsonNull()) && !jsonObj.get("iep_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iep_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iep_status").toString()));
      }
      if ((jsonObj.get("last_modified") != null && !jsonObj.get("last_modified").isJsonNull()) && !jsonObj.get("last_modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_modified").toString()));
      }
      if ((jsonObj.get("legacy_id") != null && !jsonObj.get("legacy_id").isJsonNull()) && !jsonObj.get("legacy_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacy_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacy_id").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonObject(jsonObj.getAsJsonObject("location"));
      }
      // validate the optional field `preferred_name`
      if (jsonObj.get("preferred_name") != null && !jsonObj.get("preferred_name").isJsonNull()) {
        PreferredName.validateJsonObject(jsonObj.getAsJsonObject("preferred_name"));
      }
      if (!jsonObj.get("race").isJsonNull() && (jsonObj.get("race") != null && !jsonObj.get("race").isJsonNull()) && !jsonObj.get("race").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `race` to be a primitive type in the JSON string but got `%s`", jsonObj.get("race").toString()));
      }
      if ((jsonObj.get("school") != null && !jsonObj.get("school").isJsonNull()) && !jsonObj.get("school").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `school` to be a primitive type in the JSON string but got `%s`", jsonObj.get("school").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schools") != null && !jsonObj.get("schools").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schools` to be an array in the JSON string but got `%s`", jsonObj.get("schools").toString()));
      }
      if (!jsonObj.get("section_504_status").isJsonNull() && (jsonObj.get("section_504_status") != null && !jsonObj.get("section_504_status").isJsonNull()) && !jsonObj.get("section_504_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `section_504_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("section_504_status").toString()));
      }
      if ((jsonObj.get("sis_id") != null && !jsonObj.get("sis_id").isJsonNull()) && !jsonObj.get("sis_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sis_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sis_id").toString()));
      }
      if (!jsonObj.get("state_id").isJsonNull() && (jsonObj.get("state_id") != null && !jsonObj.get("state_id").isJsonNull()) && !jsonObj.get("state_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_id").toString()));
      }
      if (!jsonObj.get("student_number").isJsonNull() && (jsonObj.get("student_number") != null && !jsonObj.get("student_number").isJsonNull()) && !jsonObj.get("student_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `student_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("student_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Student.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Student' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Student> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Student.class));

       return (TypeAdapter<T>) new TypeAdapter<Student>() {
           @Override
           public void write(JsonWriter out, Student value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Student read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Student instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Student given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Student
  * @throws IOException if the JSON string is invalid with respect to Student
  */
  public static Student fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Student.class);
  }

 /**
  * Convert an instance of Student to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

